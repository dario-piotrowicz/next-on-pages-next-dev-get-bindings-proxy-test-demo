export type WorkerRegistry = Record<string, WorkerDefinition>;
export type WorkerDefinition = {
    port: number | undefined;
    protocol: 'http' | 'https' | undefined;
    host: string | undefined;
    mode: 'local' | 'remote';
    headers?: Record<string, string>;
    durableObjects: {
        name: string;
        className: string;
    }[];
    durableObjectsHost?: string;
    durableObjectsPort?: number;
};
export declare const EXTERNAL_DURABLE_OBJECTS_WORKER_NAME = "__WRANGLER_EXTERNAL_DURABLE_OBJECTS_WORKER";
export declare const EXTERNAL_DURABLE_OBJECTS_WORKER_SCRIPT = "\nconst HEADER_URL = \"X-Miniflare-Durable-Object-URL\";\nconst HEADER_NAME = \"X-Miniflare-Durable-Object-Name\";\nconst HEADER_ID = \"X-Miniflare-Durable-Object-Id\";\n\nfunction createClass({ className, proxyUrl }) {\n\treturn class {\n\t\tconstructor(state) {\n\t\t\tthis.id = state.id.toString();\n\t\t}\n\t\tfetch(request) {\n\t\t\tif (proxyUrl === undefined) {\n\t\t\t\treturn new Response(`[wrangler] Couldn't find \\`wrangler dev\\` session for class \"${className}\" to proxy to`, { status: 503 });\n\t\t\t}\n\t\t\tconst proxyRequest = new Request(proxyUrl, request);\n\t\t\tproxyRequest.headers.set(HEADER_URL, request.url);\n\t\t\tproxyRequest.headers.set(HEADER_NAME, className);\n\t\t\tproxyRequest.headers.set(HEADER_ID, this.id);\n\t\t\treturn fetch(proxyRequest);\n\t\t}\n\t}\n}\n\nexport default {\n\tasync fetch(request, env) {\n\t\tconst originalUrl = request.headers.get(HEADER_URL);\n\t\tconst className = request.headers.get(HEADER_NAME);\n\t\tconst idString = request.headers.get(HEADER_ID);\n\t\tif (originalUrl === null || className === null || idString === null) {\n\t\t\treturn new Response(\"[wrangler] Received Durable Object proxy request with missing headers\", { status: 400 });\n\t\t}\n\t\trequest = new Request(originalUrl, request);\n\t\trequest.headers.delete(HEADER_URL);\n\t\trequest.headers.delete(HEADER_NAME);\n\t\trequest.headers.delete(HEADER_ID);\n\t\tconst ns = env[className];\n\t\tconst id = ns.idFromString(idString);\n\t\tconst stub = ns.get(id);\n\t\treturn stub.fetch(request);\n\t}\n}\n";
export declare function getRegisteredWorkers(): Promise<WorkerRegistry | undefined>;
export declare function getIdentifier(name: string): string;
